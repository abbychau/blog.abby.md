<html>

<head>
    <title>Abby's Archive</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base target="_blank">
    <link rel="stylesheet" href="https://blog.abby.md/style.css" />
    <link rel="icon" type="image/png" href="https://d2v9k5u4v94ulw.cloudfront.net/assets/images/2191294/original/e01cdc83-7764-49d6-9176-4695d37133b7?1522307876" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/yamljs/0.3.0/yaml.min.js"></script>

    <script>
        function inIframe() {
            try {
                return window.self !== window.top;
            } catch (e) {
                return true;
            }
        }

        function myMarked(str) {
            str = str.replace(/\{% youtube (.+?) %\}/g, '<iframe id="ytplayer" type="text/html" width="640" height="360" src="https://www.youtube.com/embed/$1" "frameborder="0"></iframe>');
            str = str.replace(/\{% ghcode (.+?) (.+?) (.+?) %\}/g, '$1#L$2-L$3');
            return marked(str, { gfm: true, breaks: true });
        }
        $(document).ready(function () {
            $('#content').html(myMarked($('#content').html()))
            hljs.highlightAll();

            if(!inIframe()){
                $('#homelink').show()
            }
        })
    </script>
</head>

<body>
    <div id='article' style='padding:0 15px 10px 10px'>
        <h1 id="subject">7. aCore - 全局界面</h1>
        <div id="date" style='font-size: 9pt;'>2020-05-30</div>
        <div style='font-size: 9pt; border-bottom:1px solid #444; padding-bottom:1em' id="tags"><a href='/_meta/實務電腦.htm'>實務電腦</a></div>
        <div id="content" style='word-break: break-all;'><p>現在, 我們可以利用writer 去做事了。<br />
但是, </p>
<pre><code class="language-rust">    let mut writer = Writer {
        column_position: 0,
        color_code: ColorCode::new(Color::Yellow, Color::Black),
        buffer: unsafe { &amp;mut *(0xb8000 as *mut Buffer) },
    };</code></pre>
<p>writer 是個局部物件, 那麼要怎麼可以把它提到static 局域去呢?<br />
在Rust 中, 有一個Crate 叫<code>lazy_static</code> (<a href="https://crates.io/crates/lazy_static">https://crates.io/crates/lazy_static</a>)</p>
<p>我們看看他能不能把這 <code>writer</code> 變成global</p>
<p>在<code>Cargo.toml</code> 加入 : </p>
<pre><code class="language-toml">[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"]</code></pre>
<p>然後在<code>vga_buffer.rs</code> 加入</p>
<pre><code class="language-rust">use lazy_static::lazy_static;

lazy_static! {
    pub static ref WRITER: Writer = Writer {
        column_position: 0,
        color_code: ColorCode::new(Color::Yellow, Color::Black),
        buffer: unsafe { &amp;mut *(0xb8000 as *mut Buffer) },
    };
}</code></pre>
<p>在這裡, 我們深入一點看的話, 會有好幾個問題:</p>
<ol>
<li>如果 WRITER 是immutable 的話, 要怎麼做write 呢? write 是用到 <code>&amp;mut self</code> 的</li>
<li>如果static 是mutable 的話, 這就是一個處處unsafe 的方法了</li>
<li>RefCell 呢? 雖然他是可以不傳mut 而改變內部記憶, 但它不是Sync 的</li>
</ol>
<p>在Rust 中, 我們有很多的智能指針, Rc, RefCell, Box, RefCellUnsafe...<br />
但萬變不離其宗, 這種體積的非Atomic Object, 一定要用某種方法做出臨界區才可以被多個Thread 讀取的。</p>
<p>說到臨界區, 那麼就回到Mutex, Semaphore 和 Spinlock 了<br />
Rust 中的Mutex 是在std 中的, 那麼我們先用Spinlock 解決這個問題。</p>
<p>在<code>Cargo.toml</code> 加入 </p>
<pre><code>[dependencies]
spin = "0.5.2"</code></pre>
<p>然後把 WRITER 改成</p>
<pre><code class="language-rust">use spin::Mutex;
//...
    pub static ref WRITER: Mutex&lt;Writer&gt; = Mutex::new(Writer {
        column_position: 0,
        color_code: ColorCode::new(Color::Yellow, Color::Black),
        buffer: unsafe { &amp;mut *(0xb8000 as *mut Buffer) },
    });</code></pre>
<p>這麼print_something 就可以移除了</p>
<p>在main 中, write! 會同樣發揮效果</p>
<pre><code class="language-rust">#[no_mangle]
pub extern "C" fn _start() -&gt; ! {
    use core::fmt::Write;
    vga_buffer::WRITER.lock().write_str("Hello again").unwrap();
    write!(vga_buffer::WRITER.lock(), ", some numbers: {} {}", 42, 1.337).unwrap();

    loop {}
}</code></pre>
<h2>macro</h2>
<p>我們有global writer 了, 那麼再進一步把它寫成macro 吧~</p>
<p>我們參考一下Rust 的println! macro 是怎麼寫的: (<a href="https://doc.rust-lang.org/nightly/std/macro.println.html">https://doc.rust-lang.org/nightly/std/macro.println.html</a>)</p>
<pre><code class="language-rust">#[macro_export]
macro_rules! println {
    () =&gt; (print!("\n"));
    ($($arg:tt)*) =&gt; (print!("{}\n", format_args!($($arg)*)));
}</code></pre>
<p>嗯... 裡面有用到<code>print!</code> (<a href="https://doc.rust-lang.org/nightly/std/macro.print.html">https://doc.rust-lang.org/nightly/std/macro.print.html</a>)</p>
<pre><code class="language-rust">#[macro_export]
macro_rules! print {
    ($($arg:tt)*) =&gt; ($crate::io::_print(format_args!($($arg)*)));
}</code></pre>
<p>我們看到一個叫<code>$crate</code> 的變數 (<a href="https://doc.rust-lang.org/1.30.0/book/first-edition/macros.html#the-variable-crate">https://doc.rust-lang.org/1.30.0/book/first-edition/macros.html#the-variable-crate</a>)</p>
<p>在Rust 中, 可以利用這個變數去把macro 作跨crate 的重用, 但目前是不保証hygenic 的。</p>
<p>那麼我們依樣畫葫蘆做一個<code>println!</code> 和<code>print!</code> 吧!</p>
<p>在vga_buffer.rs 加入:</p>
<pre><code>#[macro_export]
macro_rules! print {
    ($($arg:tt)*) =&gt; ($crate::vga_buffer::_print(format_args!($($arg)*)));
}

#[macro_export]
macro_rules! println {
    () =&gt; ($crate::print!("\n"));
    ($($arg:tt)*) =&gt; ($crate::print!("{}\n", format_args!($($arg)*)));
}

#[doc(hidden)]
pub fn _print(args: fmt::Arguments) {
    use core::fmt::Write;
    WRITER.lock().write_fmt(args).unwrap();
}</code></pre>
<p>這樣main 就可以寫成這樣了:</p>
<pre><code class="language-rust">#[no_mangle]
pub extern "C" fn _start() {
    println!("Hello World{}", "!");

    loop {}
}</code></pre>
<p>在main.rs 再加入一個panic handler</p>
<pre><code class="language-rust">#[panic_handler]
fn panic(info: &amp;PanicInfo) -&gt; ! {
    println!("{}", info);
    loop {}
}</code></pre>
<p>如果我們在<code>_start()</code> 加入<code>panic!("Some panic message");</code> 的話, 那麼這句就會被panic 所捕獲然後loop{}<br />
而前後也會出現rust 的罐頭panicinfo.</p>
<p><img src="https://cdn0.zkiz.com/file/realblog/user_files/4/5ed273892871eimage-1590850447281.png" alt="file" /></p></div>


        <script src="https://utteranc.es/client.js"
        repo="abbychau/blog.abby.md"
        issue-term="pathname"
        label="blog comment"
        theme="github-dark"
        crossorigin="anonymous"
        async>
        </script>

        <div id="permalink" style='word-break: break-all;padding:2em 0 1em 0'>
            <a href="https://blog.abby.md/_generated/realblog_2020-05_270529.htm">Permalink of this blog</a>
            <a href="https://github.com/abbychau/blog.abby.md/blob/master/./original-data/realblog/2020-05/270529.md">Source</a>
        </div>
        
        <div id="homelink" style='word-break: break-all;padding:1em 0 2em 0;display: none;'>
            <a href="/">Abby's Archive</a>
        </div>  
    </div>
</body>

</html>