<html>

<head>
    <title>Abby's Archive</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base target="_blank">
    <style>
        /* for all screens */
        #info {
            display: none;
        }

        /* only when orientation is in portrait mode */
        @media all and (orientation:portrait) {
            #info {
                color: red;
                display: inline;
                font-size: 20px
            }
        }
        .myblock{
            padding: 1em 0;
        }
        body {
            background-color: #2c292d;
            color: #fdf9f3;
            padding: 1em;
            margin: 0;
            font-family: consolas, monospace;
        }

        a {
            color: #a9dc76;
            cursor: pointer
        }

        .hljs {
            font-family: consolas, monospace;
        }

        img {
            max-width: 90%;
        }
    </style>
    <link rel="icon" type="image/png"
        href="https://d2v9k5u4v94ulw.cloudfront.net/assets/images/2191294/original/e01cdc83-7764-49d6-9176-4695d37133b7?1522307876" />

    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/yamljs/0.3.0/yaml.min.js"></script>

    <script>
        function inIframe() {
            try {
                return window.self !== window.top;
            } catch (e) {
                return true;
            }
        }
        function myMarked(str) {
            str = str.replace(/\{% youtube (.+?) %\}/g, '<iframe id="ytplayer" type="text/html" width="640" height="360" src="https://www.youtube.com/embed/$1" "frameborder="0"></iframe>');
            str = str.replace(/\{% ghcode (.+?) (.+?) (.+?) %\}/g, '$1#L$2-L$3');
            return marked(str, { gfm: true, breaks: true });
        }
        $(document).ready(function () {
            $('#content').html(myMarked($('#content').html()))
            if(!inIframe()){
                $('#homelink').show()
            }
            hljs.highlightAll();
        })
    </script>
</head>

<body>
    <div id='article' style='padding:0 15px 10px 10px'>
        <h1 id="subject">4k 之內</h1>
        <div id="date" style='font-size: 9pt;'>2010-01-01</div>
        <div style='font-size: 9pt; border-bottom:1px solid #444; padding-bottom:1em' id="tags"><a href='/_meta/實務電腦.htm'>實務電腦</a></div>
        <div id="content" style='word-break: break-all;'><p>看到一篇頗有趣的討論, 很多論點呢  </p>
<p><a href="http://www.phpx.com/happy/archiver/tid-257682.html">http://www.phpx.com/happy/archiver/tid-257682.html</a>  </p>
<p>php 寫下mysqli 的class 時沒有把caching 包含進去令到人們十分的不方便, 人們把以前mysql 的做法再一次放到mysqli 上  </p>
<p>這個類的評價的地方實在很多, 首先用object 的alias 去套進另一個class 中已經是人們十分不願看到的一件事<br />
不過最多評價還是在caching 上  </p>
<p>樓主所用的是serialize 和deserialize, 我一直覺得效率已經十分好了  </p>
<p>但樓下的點評也有很多資訊值得記下<br />
理论上,mysql在读取数据前是经过一系列的判断操作之后再开始读取数据.  </p>
<p>把要查询的东西生成一很简单的txt文档之后,直接读取的速度是要大大的快过从库里查询的.而且CPU或内存的使用量也应该要远远小于从库中查询才对.</p>
<p>====================================</p>
<p>那只是理论，但实际上并非如此<br />
[code]for($i=0;$i&lt;100;$i++) {<br />
$sql = &quot;select * from words as a left join relative_words as b on a.word_id=b.word_id limit 0,1000&quot;;<br />
//$res = $db-&gt;get_all($sql);<br />
$res = $db-&gt;cache_all($sql);<br />
}[/code]<br />
结果很诡异，前者<br />
cost 1.00315293312 seconds<br />
后者<br />
cost 1.16315293312 seconds</p>
<p>=====================================</p>
<p>我的测试结果是相反的。最简单的取一条数据也是文本缓存的快一些。可能你缓存类的初始化过程比较费时间。</p>
<p>=====================================</p>
<p>反序列化双刃剑，如果数据较多，数组较复杂，就比较烦了  </p>
<p>既然是cache就有命中率一说  </p>
<p>数据库也是要走IO的，文件也是IO，文件cache配合内存cache效果会很好，通过优化cache，根据需求合理使用才是正确的选择(究竟如何才是合理呢...下面有答案)</p>
<p>=====================================</p>
<p>一般情况下用文本“缓存”绝对是大站的恶梦(google fs这类除外)，轻量级应用还凑和，大型应用根本不行，也不可靠。  </p>
<p>并行读写、ACID...</p>
<p>=====================================</p>
<p><span style="font-size: 16px;">**这几天忙，没来看，多谢各位的回复。  </p>
<p>关于单文件夹，这个其实在实际使用的时候是下面还有2级的文件夹，截取的md5前4位  </p>
<p>单次查询其实走的还是mysql，第二次及更多查询的时候才是走文本缓存。  </p>
<p>后来又做了些测试，当多表联查的时候，文本缓存还是有优势的，但是现在刻意只将数据在4k以下的做缓存，超过4k因为会分到磁盘的两个簇中，存放位置不一定连续，所以不使用  </p>
<p>在无法使用memcache或者tt的情况下这个东西还是有点用处，关于并行读写，现在我还没发现什么问题** </span></p>
<p>======================================  </p>
<p>樓主最後的回覆真的是要點...究然連4k 一個簇也考慮進去了<br />
那麼站點可以考慮把cluster size 很大(約16kB)的一個磁碟作為caching 使用, 反正對於伺服器來說, 磁碟機空間常常有很多但只是帶寬和cpu 不夠而已</p></div>


        <script src="https://utteranc.es/client.js"
        repo="abbychau/blog.abby.md"
        issue-term="pathname"
        label="blog comment"
        theme="github-dark"
        crossorigin="anonymous"
        async>
        </script>

        <div id="permalink" style='word-break: break-all;padding:2em 0 1em 0'>
            <a href="https://blog.abby.md/_generated/realblog_2010-01_13659.htm">Permalink of this blog</a>
            <a href="https://github.com/abbychau/blog.abby.md/blob/master/./original-data/realblog/2010-01/13659.md">Source</a>
        </div>
        
        <div id="homelink" style='word-break: break-all;padding:1em 0 2em 0;display: none;'>
            <a href="/">Abby's Archive</a>
        </div>  
    </div>
</body>

</html>