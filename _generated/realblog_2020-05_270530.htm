<html>

<head>
    <title>8. aCore - CPU 異常處理(1)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base target="_blank">
    <link rel="stylesheet" href="https://blog.abby.md/style.css" />
    <link rel="icon" type="image/png" href="https://blog.abby.md/favicon.png" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/yamljs/0.3.0/yaml.min.js"></script>
    
    <script>
        function inIframe() {
            try {
                return window.self !== window.top;
            } catch (e) {
                return true;
            }
        }

        function myMarked(str) {
            str = str.replace(/\{% youtube (.+?) %\}/g, '<iframe id="ytplayer" type="text/html" width="640" height="360" src="https://www.youtube.com/embed/$1" "frameborder="0"></iframe>');
            str = str.replace(/\{% ghcode (.+?) (.+?) (.+?) %\}/g, '$1#L$2-L$3');
            return marked(str, { gfm: true, breaks: true });
        }
        $(document).ready(function () {
            $('#content').html(myMarked($('#content').html()))
            hljs.highlightAll();

            if(!inIframe()){
                $('#homelink').show()
            }
        })
    </script>
</head>

<body>
    <div id='article' style='padding:0 15px 10px 10px;font-size: large;font-family: serif;'>
        <h1 id="subject">8. aCore - CPU 異常處理(1)</h1>
        <div id="date" style='font-size: 9pt;'>2020-05-31</div>
        <div style='font-size: 9pt; border-bottom:1px solid #444; padding-bottom:1em' id="tags"><a href='/_meta/實務電腦.htm'>實務電腦</a></div>
        <div id="content" style='word-break: break-all;'><p>其實, CPU 也是一台計算器.<br />
它也會返回不同的異常, 最常見的如: 除零、溢位。</p>
<p>那麼我們怎麼利用到CPU 的這些信息呢?<br />
在這之前, 我們看看我們可能會有甚麼信息。</p>
<p><a href="https://wiki.osdev.org/Exceptions#Faults">https://wiki.osdev.org/Exceptions#Faults</a></p>
<p>其中最重要的:</p>
<ol>
<li>Page Fault: 寫到未划分的記憶體或者只讀記憶體.</li>
<li>Invalid Opcode: 查無此opcode</li>
<li>General Protection Fault: 包山包海的記體憶錯誤, 最常見是Segmentation fault, 也就是沒有讀取權限。</li>
<li>Double Fault: 常有Exception 時, exception handler 會被叫起, 而如果exception handler 有Exception... 這就是不幸的Double Fault 了</li>
<li>Triple Fault: Double Fault 會直接上交到CPU, CPU 會有Double fault 的處理函數, 而如果這個函數有錯誤, 這就無藥可救, 會導致電腦(OS)重啟。</li>
</ol>
<p>那麼CPU 是怎麼把這些異常分類的呢?</p>
<p>我們有...</p>
<p><img src="https://cdn0.zkiz.com/file/realblog/user_files/4/5ed27c8543006image-1590852747688.png" alt="file" /></p>
<p><img src="https://cdn0.zkiz.com/file/realblog/user_files/4/5ed27ca13abbbimage-1590852776068.png" alt="file" /></p>
<h2>中斷描述表</h2>
<p>中斷描述表 : Interrupt Descriptor Table (IDT)</p>
<p>它是一個16-byte 的描述規格。</p>
<pre><code>Type| 名稱                     | 描述
----|--------------------------|-----------------------------------
u16 | Function Pointer [0:15]  | 函數位置(頭16bit)
u16 | GDT selector             | 指寫何個全局描述符表(GDT) 的區段的(https://en.wikipedia.org/wiki/Global_Descriptor_Table)
u16 | Options                  | (如下)
u16 | Function Pointer [16:31] | 函數位置(中16bit)
u32 | Function Pointer [32:63] | 函數位置(尾16bit)
u32 | Reserved                 |</code></pre>
<p>Option 中有</p>
<p>The options field has the following format:</p>
<pre><code>Bits  | 名稱                              | 描述
------|-----------------------------------|-----------------------------------
0-2   | Interrupt Stack Table Index       | 跳到IST 的第n 層(0 時當前位置)
3-7   | Reserved                          | 保留
8     | 0: Interrupt Gate, 1: Trap Gate   | 當0 時, 中斷將不會發生
9-11  | must be one                       | checksum 用
12    | must be zero                      | checksum 用
13‑14 | Descriptor Privilege Level (DPL)  | 執行這個handler function 的最低權限等級
15    | Present                           | 是否當前</code></pre>
<p>Interrupt Stack Table (IST) , 中文是 <code>中斷棧</code> 。<br />
就是在除錯時的, 函數調用的最低階狀態, 不同的CPU 架構有不同的棧結構。aCore 現時是在x86 架構上運行的。</p>
<p>當有異常時, CPU 大概會做下面的事:</p>
<ol>
<li>Register, instruction pointer 和 <a href="https://en.wikipedia.org/wiki/FLAGS_register">RFLAGS</a> register, 三者入棧。</li>
<li>檢查 Interrupt Descriptor Table (IDT). 是哪一個entry. (e.g. 14 就是page fault)</li>
<li>這個entry 是當前的layer 嗎? 不是的話, 就Raise 一個Double Fault</li>
<li>如果bit40 是interrupt gate 的話, disable hardware interrupts (變成soft interrupt)</li>
<li>映射 GDT(<a href="https://en.wikipedia.org/wiki/Global_Descriptor_Table">https://en.wikipedia.org/wiki/Global_Descriptor_Table</a>) 中的定義, 取後code segment的位置</li>
<li>跳到handler function</li>
</ol>
<p>Rust 中有 內置可以讀取的IDT : <a href="https://docs.rs/x86_64/0.11.0/x86_64/structures/idt/struct.InterruptDescriptorTable.html">https://docs.rs/x86_64/0.11.0/x86_64/structures/idt/struct.InterruptDescriptorTable.html</a></p>
<p>看源碼時  :</p>
<pre><code class="language-rust">#[repr(C)]
pub struct InterruptDescriptorTable {
    pub divide_by_zero: Entry&lt;HandlerFunc&gt;,
    pub debug: Entry&lt;HandlerFunc&gt;,
    pub non_maskable_interrupt: Entry&lt;HandlerFunc&gt;,
    pub breakpoint: Entry&lt;HandlerFunc&gt;,
    pub overflow: Entry&lt;HandlerFunc&gt;,
    pub bound_range_exceeded: Entry&lt;HandlerFunc&gt;,
    pub invalid_opcode: Entry&lt;HandlerFunc&gt;,
    pub device_not_available: Entry&lt;HandlerFunc&gt;,
    pub double_fault: Entry&lt;HandlerFuncWithErrCode&gt;,
    pub invalid_tss: Entry&lt;HandlerFuncWithErrCode&gt;,
    pub segment_not_present: Entry&lt;HandlerFuncWithErrCode&gt;,
    pub stack_segment_fault: Entry&lt;HandlerFuncWithErrCode&gt;,
    pub general_protection_fault: Entry&lt;HandlerFuncWithErrCode&gt;,
    pub page_fault: Entry&lt;PageFaultHandlerFunc&gt;,
    pub x87_floating_point: Entry&lt;HandlerFunc&gt;,
    pub alignment_check: Entry&lt;HandlerFuncWithErrCode&gt;,
    pub machine_check: Entry&lt;HandlerFunc&gt;,
    pub simd_floating_point: Entry&lt;HandlerFunc&gt;,
    pub virtualization: Entry&lt;HandlerFunc&gt;,
    pub security_exception: Entry&lt;HandlerFuncWithErrCode&gt;,
    // some fields omitted
}</code></pre>
<p>會發覺它們都是(<code>idt::Entry&lt;F&gt;</code>)[<a href="https://docs.rs/x86_64/0.11.0/x86_64/structures/idt/struct.Entry.html">https://docs.rs/x86_64/0.11.0/x86_64/structures/idt/struct.Entry.html</a>].<br />
<code>F</code> 代表 handler function 的類型。</p></div>


        <script src="https://utteranc.es/client.js"
        repo="abbychau/blog.abby.md"
        issue-term="pathname"
        label="blog comment"
        theme="github-dark"
        crossorigin="anonymous"
        async>
        </script>

        <div id="permalink" style='word-break: break-all;padding:2em 0 1em 0'>
            <a href="https://blog.abby.md/_generated/realblog_2020-05_270530.htm">Permalink of this blog</a>
            <a href="https://github.com/abbychau/blog.abby.md/blob/master/./original-data/realblog/2020-05/270530.md">Source</a>
        </div>
        
        <div id="homelink" style='word-break: break-all;padding:1em 0 2em 0;display: none;'>
            <a href="/">Abby's Archive</a>
        </div>  
    </div>
</body>

</html>
