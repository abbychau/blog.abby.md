<html>

<head>
    <title>Benchmarking nom 2</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base target="_blank">
    <link rel="stylesheet" href="https://blog.abby.md/style.css" />
    <link rel="icon" type="image/png" href="https://blog.abby.md/favicon.png" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/yamljs/0.3.0/yaml.min.js"></script>
    
    <script>
        function inIframe() {
            try {
                return window.self !== window.top;
            } catch (e) {
                return true;
            }
        }

        function myMarked(str) {
            str = str.replace(/\{% youtube (.+?) %\}/g, '<iframe id="ytplayer" type="text/html" width="640" height="360" src="https://www.youtube.com/embed/$1" "frameborder="0"></iframe>');
            str = str.replace(/\{% ghcode (.+?) (.+?) (.+?) %\}/g, '$1#L$2-L$3');
            return marked(str, { gfm: true, breaks: true });
        }
        $(document).ready(function () {
            $('#content').html(myMarked($('#content').html()))
            hljs.highlightAll();

            if(!inIframe()){
                $('#homelink').show()
            }
        })
    </script>
</head>

<body>
    <div id='article' style='padding:0 15px 10px 10px;font-size: large;font-family: serif;'>
        <h1 id="subject">Benchmarking nom 2</h1>
        <div id="date" style='font-size: 9pt;'>2019-05-20</div>
        <div style='font-size: 9pt; border-bottom:1px solid #444; padding-bottom:1em' id="tags"><a href='/tags/rust.htm'>Rust</a>, <a href='/tags/parser.htm'>Parser</a>, <a href='/tags/nom.htm'>nom</a></div>
        <div id="content" style='word-break: break-all;'><h2>Prolog</h2>
<p>In the previous post : &quot;Benchmarking nom&quot;. We tried a test without really making use of the real feature that nom provide. I won't go deep this time either, but let's make <code>is_hex_digit</code> really working and to ensure that no error will be passed into conversion.</p>
<h2>Changes</h2>
<pre><code class="language-Rust">pub fn is_hex_digit(c: char) -&gt; bool {
    c.is_digit(16)
}</code></pre>
<p>The parsing function of <code>direct.rs</code> becomes:</p>
<pre><code class="language-Rust">fn structure1(c: &amp;str) -&gt; Result&lt;Color, &amp;str&gt; {
    macro_rules! mc1 {
        ($from:expr,$to:expr) =&gt; {{
            for ele in c[$from..$to].chars() {
                if !is_hex_digit(ele) {
                    return Err("Oh no");
                }
            }
            from_hex(&amp;c[$from..$to]).unwrap()
        }};
    }
    Ok(Color {
        red: mc1!(1, 3),
        green: mc1!(3, 5),
        blue: mc1!(5, 7),
        number1: to_i64(&amp;c[7..7 + 8]).unwrap(),
        number2: to_i64(&amp;c[7 + 8..7 + 8 + 8]).unwrap(),
        number3: to_i64(&amp;c[7 + 8 + 8..7 + 8 + 8 + 8]).unwrap(),
        number4: to_i64(&amp;c[7 + 8 + 8 + 8..7 + 8 + 8 + 8 + 8]).unwrap(),
        number5: to_string(&amp;c[7 + 8 * 4..7 + 8 * 4 + 100]).unwrap(),
    })
}</code></pre>
<h2>Result</h2>
<p>After running a <code>cargo +nightly bench</code>, we got:</p>
<pre><code>running 1 test
test tests_direct::parse_color1 ... bench:         291 ns/iter (+/- 18)

test result: ok. 0 passed; 0 failed; 0 ignored; 1 measured; 0 filtered out

     Running target/release/deps/nomtest-a643b08a9c32cd49

running 1 test
test tests_main::parse_color1 ... bench:         725 ns/iter (+/- 163)

test result: ok. 0 passed; 0 failed; 0 ignored; 1 measured; 0 filtered out
</code></pre>
<p>I repeated a couple more times and the readings are similar.</p>
<p>The raw reader changes from 263 to 291 and nom changes from 670 to 725. The increment of punishment of validation is happening inside nom as well. I would suppose the power of <strong>Zero Cost Abstraction</strong> is happening at this corner. It is a bit out of my expection.</p>
<p>Parser is good for reusing many meaningful elements of the string(or bit) format. So without nesting the same element inside the context like <code>json</code>, <code>toml</code>, <code>xml</code>, parsing engine does not payout much.</p></div>


        <script src="https://utteranc.es/client.js"
        repo="abbychau/blog.abby.md"
        issue-term="pathname"
        label="blog comment"
        theme="github-dark"
        crossorigin="anonymous"
        async>
        </script>

        <div id="permalink" style='word-break: break-all;padding:2em 0 1em 0'>
            <a href="https://blog.abby.md/posts/hexo_Benchmarking-nom-2.htm">Permalink of this blog</a>
            <a href="https://github.com/abbychau/blog.abby.md/blob/master/./original-data/hexo/Benchmarking-nom-2.md">Source</a>
        </div>
        
        <div id="homelink" style='word-break: break-all;padding:1em 0 2em 0;display: none;'>
            <a href="/">Abby's Archive</a>
        </div>  
    </div>
</body>

</html>
