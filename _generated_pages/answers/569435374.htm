<html>

<head>
    <title>Abby's Archive</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base target="_blank">
    <link rel="stylesheet" href="https://blog.abby.md/style.css" />
    <link rel="icon" type="image/png"
        href="https://d2v9k5u4v94ulw.cloudfront.net/assets/images/2191294/original/e01cdc83-7764-49d6-9176-4695d37133b7?1522307876" />

    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js"></script>

</head>

<body>
    
    <div id='article' style='padding:0 15px 10px 10px'>
        <h1 id="subject">除了 Go、Rust、Nim，還有哪些新編程語言更靠譜？</h1>
        <div id="date" style='font-size: 9pt;'>2019-01-08 23:58</div>
        <div style='font-size: 9pt; border-bottom:1px solid #444; padding-bottom:1em' id="tags">答案</div>
        <div id="content" style='word-break: break-all;'><p>我是來吐糟問主的，先吐再答。</p><p><br></p><p><br></p><blockquote>用 Go 語言做了一個網站，數據庫用的封裝的谷歌的 leveldb，自己又封裝了一個c語言執行的正則表達式，加速了路由的解析，運行了幾個月，除了對Json 的處理過於繁瑣不太滿意，Go語言確實效率奇高，經過幾次整合和設計後，整個服務器的代碼加起來也不超過2000行。<br>但是感覺還是有些瑕疵，比如說，繁複的錯誤處理，雖然有幾種方法可以緩減，但實際上只是把麻煩變了一個樣。再者，有時候錯誤就應該和其他值統一，不應該檢查一遍前面的邏輯是否存在錯誤，又要去檢查它的另一個返回值是不是空值。比如說讀取數據庫，讀取操作沒任何錯誤，但查找的結果就是個空值。當然可以原地解決掉可能的錯誤，就返回一個值。但這會擾亂同類型問題集中解決的原則。會加重維護的難度。不像c#，不需要這麽啰嗦，把關鍵的地方扔到一個try catch 就能抽象的解決一大塊，只需要考慮出現問題後的應付方案，因為有些錯誤的出現幾率幾乎沒有，一旦這種錯誤出現很可能是因為硬件故障，那不應該是開發者應該處處擔心，處處檢查的問題。當然 recover 加panic 好像就是try catch 的翻版。但不是每一個錯誤都會 panic, 都會觸發 recover 。</blockquote><p>錯誤類型是很多新語言共有的特點，Go, Rust, Kotlin, Swift。。。那就是市場有這個需求。反正如果這個都用不著，直接上Scripting language 就可以了。</p><p><br></p><blockquote>還有就是，如果對一個值（其實它是個nil值），進行類型申明，會拋出一個panic, 所以處理Json 數據的時候，不然就一個一個的檢查，不然來個 recover, 但有時候還是想它拋掉這個缺失繼續跑，recover就變得有點複雜了。</blockquote><p>默。。。json.Unmarshal target 的struct 有個omitempty 的flag 可以用。。。。</p><p><br></p><blockquote>還有就是 Go語言，看似簡單，沒有良好的編程習慣，很可能在同一個包里，做同樣的事情，或者一不小心，就把別的文件里定義的變量給重寫了。</blockquote><p>Global 這東西， 沒有的時候就死活都自己去做一個(像Rust 的lazy_static), 有的時候又怪別人沒管好。。。</p><p><br></p><blockquote>再來說說 Rust ，node.js 的 包管理器，最大的毛病是同一個模塊，可能重複出現在各個子模塊的依賴項里，讓整個項目的依賴項，變成一個包括n個文件，臃腫不堪的文件夾。</blockquote><p>獨立起依賴算是缺點那這缺點只是對比起Go 來說的...</p><p><br></p><blockquote>Rust 的cargo 如果嘗試加載本地模塊的話也有同樣的問題。而且遠遠沒有npm 那麽功能強大，依托github 的亞馬遜服務器，讓中國用戶用它導入包時，很郁悶。</blockquote><p>找個cargo vendor 之類的，中國用戶用它導入github 慢不算語言的缺點</p><p><br></p><blockquote>再者是Rust 的語法有太多小hack，比如說，數值允許下劃線來提高閱讀性。</blockquote><p>這個特性也沒有迫著你去用啊</p><p><br></p><blockquote>一個塊里最後一個表達式不帶分號怎麽樣？帶了又怎麽樣，</blockquote><p>區塊中的返回不帶return 更省力，比如 let a = { b=init(match k{p(x)=&gt;({let k = kk::new(); k.set(x); k}), _=&gt;1); b.send(); b } ; 而且我更沒想到這也能不滿。。。</p><p><br></p><blockquote>連聲明一個常量也有 const，static的區別，然後字符串又是個特例。加上眼花繚亂的數值類型的簽名，二進制，八進制，前綴，後綴搞在一堆。</blockquote><p>我聽不明白，這是說"我想用一個語言卻不想去知有甚麼primitive types"？</p><p><br></p><blockquote>還有一堆讓人十分郁悶的開啟關閉編譯器的各種特性的屬性，數組切片，擁有者，借入借出，宏……</blockquote><p>不喜歡的特性可以不用，要用到時沒有才是問題吧。沒有Owner model 那可以用回GC 語言, Go 和Nim。要不含GC 程序總要想個辦法記下來。</p><p><br></p><blockquote>總覺得c ++也不過如此。這麽多東西搞在一起。又沒有強大的開發工具，還要時時刻刻考慮堆棧等內存問題，然後還要思考整個設計方式，絕對是精力旺盛，喜歡拼命折騰的人的最愛。因為你需要巨大的投入來處理各種郁悶，產能卻雞肋的問題。</blockquote><p>產能和web 應用上的確低下，但寫個基礎應用，用上regex, nom 之類的包時，產能就不低了。用C/C++ 寫很痛，有其他語言寫還不夠舊的快。</p><p><br></p><blockquote>還有就是Nim, 靜態語言，有可以完全關閉的垃圾回收，把代碼編譯成c代碼，性能當然也不會差。它的語法很像Python,幾個從業很久的c++高手都說，這門語言讓他們眼鏡一亮，但因為開發文檔和社區太那個了。無論多麽簡單的語言，背後其實都是需要很大投入的一種文化和一種思維邏輯。暫時還沒有深入接觸。</blockquote><p>那接觸一下。</p><p><br></p><blockquote>用過c#,受不了它散散步，也要開著微軟1號線的龐大。</blockquote><p>C# 只是個語言, 不上 .net framework 用甚麼寫都可以，對比起JS,Rust, Go,Java 等等，多少人都是 Vim/Emacs/VSCode 等等渡日, C# 也不例外， 它還有 .Net core。也有Mono, 也可以用MonoDevelop。</p><p><br></p><blockquote>用過PHP ，框架和版本一更新，潘多拉盒子打開了，又得無數次拜訪谷歌，</blockquote><p>這我還是第一次聽過有人覺得PHP 升級痛苦。初初配置伺服器誰不要Google 無數次？真枉費PHP 為了透明升級，背負了這麼久"內置方法命名和參數次序混亂"這罵名。而且，你感受到痛苦不代表這是PHP所以特別痛苦。</p><p><br></p><blockquote>用過Python 受不了那種嚴格的縮進，</blockquote><p>這樣的話連Nim 都用不了，縮進敏感或者一堆括號總要選一個。</p><p><br></p><blockquote>和對中文編碼的不友善。</blockquote><p>python2 加個u , python3 默認utf8，甚麼都不用做，有甚麼不友善？</p><p><br></p><blockquote>用過JAVA,虛擬機太吃內存</blockquote><p>我表示問號。。。你舉個例子</p><p><br></p><blockquote>而且類庫太龐大又不像c#有那麽牛逼的開發文檔。而且，就算你不願意面向對象，各種庫也逼迫你定義各種接口，虛擬類，和尾大不掉的泛型。</blockquote><p>這是庫的問題，今天輕量庫不少的。</p><p><br></p><blockquote>而Node.js ，如果真的做服務器，還寧可用PHP。</blockquote><p>你到底在問語言還是服務器？Node.js 不等於JS/ES/TS/Coffee 等等。。做服務器寧可用PHP 不等於JS 不好。</p><p><br></p><p>答案：</p><p>如果Go, Rust, Nim 都算新的話, <b>Swift</b> 和<b>Kotlin</b> 都挺漂亮的，而且十分靠譜。如果還是掂記著腳本語言的產能。那只好上Python。</p><p>偏要和PHP 比的話，你試這麼多語言都單單是為了寫Web後端?</p><p>要看起來漂亮，數組又簡單的話，還可以用用Lua，但我覺得你會覺得建個class 都要用到metatable 不友好。。。</p><p>Nim 是挺不錯的，算法寫對就有一級性能，而且原生Json Parser 也很快，估計適合寫開伺服器的你，但庫很少，要用到甚麼都沒有時，你又覺得不高興了。而且我還記得你受不了那種嚴格的縮進。</p><p><br></p><p>就單純對接服務和伺服器的業務邏輯來說，要和PHP 和JS 比產能是不可能的，那幾乎是可以想到的最優解了，但很多項目遠不只這層。</p><p>程序語言的追求也遠不只這些。</p><p>而且規模化的路徑也不只一條。多嘗試不同的語言是一年好事，但如果單憑感覺就已經會不滿的話，除了自己寫一個別無他法。</p><p><br></p><p>對了JS 的變種 TS, Dart, Flow, 等等也可以。</p></div>
        <div id="permalink" style='word-break: break-all;padding:2em 0 2em 0'><a href="https://blog.abby.md/_generated_pages/answers/569435374.htm">Permalink of this blog</a></div>
        
    </div>
</body>
<script>
    $("img[data-actualsrc]").each(function(num,e){
        $(this).attr("src",$(this).attr("data-actualsrc"));
    });
    hljs.highlightAll();
</script>
</html>