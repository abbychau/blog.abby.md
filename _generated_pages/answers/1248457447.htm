<html>

<head>
    <title>如果你們想要自創一個編程語言，你們希望它有什麽特色?</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://blog.abby.md/style.css" />
    <link rel="icon" type="image/png"
        href="https://blog.abby.md/favicon.png" />
    

    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js"></script>
    <script src="/script.js"></script>
</head>

<body>
    
    <div id='article' style='padding:0 15px 10px 10px'>
        <h1 id="subject">如果你們想要自創一個編程語言，你們希望它有什麽特色?</h1>
        <div id="date" style='font-size: 9pt;'>2020-05-27 03:06</div>
        <div style='font-size: 9pt; border-bottom:1px solid #444; padding-bottom:1em' id="tags">答案</div>
        <div id="content" style='word-break: break-all;'><p>就生產力來說, 我和很多人理想語言有著比較相反的概念</p><p>有很多人都說了強類型 / 反射 / 或者防止隱性推導的特色. 但再強也強不過Rust / Haskell .</p><p>反而, 我覺得把隱性推導再更進一步也未必不是好事</p><p>先像是PHP 那樣, 字串可以直接當成boolean, array(包括map), float, int, 空值 , 雖然這樣會令很多不了解轉換規則的人寫出不安全的代碼, 但能借技術債才是編程語言的根本需求。</p><p>但我覺得可以更進一步, 就是利用類似tabnine 的AI code completion, 把class / object / json / array 都一併推導了</p><p>像是要把一個grpc 的go struct 或者java class 同時給dynamodb / mysql / grpc 共用時, annotation 不用打, 不用寫新的models, 也不用改protoc gen 出來的代碼</p><p>AI 直接把不同大小寫/camelCase/underscore 和型態等等的理解了</p><p>像這種go 代碼就不用手工定義</p><div class="highlight"><pre><code class="language-text"><span></span>	kolDigit := int64(0)
	if ui.IsKOL {
		kolDigit = 1
	}
	return &amp;pb.UserScoreInfo{
		Id:            ui.ID,
		Feeds:         ui.Feeds,
		Comments:      ui.Comments,
		ReceivedLikes: ui.ReceivedLikes,
		BaseScore:     ui.BaseScore,
		TotalScore:    ui.TotalScore,
		IsKol:         kolDigit,
	}, nil
</code></pre></div><p>AI 會自動構建一個像Rust 的convert::from 和 convert::to, </p><p>再進一步, 就是把樣本 TCP / UDP / GRPC / HTTP / WebSocket 等等的返回格式推導, 程序員可以隨便用map 歷遍這個格式, 也可以在寫成異步或者流風格時自動作出反應。</p><p>(可選) 在有利用到數據庫的情況下, 會在初期生成表格和主鍵, 在中期找到熱點並生成性價比高的鍵值</p><p>最後一點就是: 把已經借了的債和ambiguious deduction 造成一個列表, 可以讓使用者去打勾或選擇去完成償債動作。</p><p></p></div>
        <div id="permalink" style='word-break: break-all;padding:2em 0 2em 0'><a href="https://blog.abby.md/_generated_pages/answers/1248457447.htm">Permalink of this blog</a></div>
        
    </div>
</body>
<script>
    $("img[data-actualsrc]").each(function(num,e){
        $(this).attr("src",$(this).attr("data-actualsrc"));
    });
    hljs.highlightAll();
</script>
</html>